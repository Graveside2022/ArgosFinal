#!/bin/bash

# ArgosFinal Production Build Script
# This script builds the project for production and prepares it for deployment

set -e  # Exit on error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Print colored output
print_status() {
    echo -e "${GREEN}[BUILD]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if we're in the project root
if [ ! -f "package.json" ]; then
    print_error "Must be run from the project root directory"
    exit 1
fi

# Create production environment file if it doesn't exist
if [ ! -f ".env.production" ]; then
    print_status "Creating production environment file..."
    cat > .env.production << 'EOF'
# ArgosFinal Production Environment Configuration
# Auto-generated by build-production.sh

# Server Configuration
PUBLIC_BASE_URL=http://localhost:3000
PORT=3000
NODE_ENV=production

# Backend API Configuration
PUBLIC_API_BASE_URL=http://localhost:8005
PUBLIC_WS_URL=ws://localhost:8005

# Direct Service Endpoints (for legacy compatibility during migration)
PUBLIC_HACKRF_API_URL=http://localhost:8092
PUBLIC_KISMET_API_URL=http://localhost:2501
PUBLIC_WIGLETOAK_API_URL=http://localhost:8000
PUBLIC_OPENWEBRX_URL=http://localhost:8073
PUBLIC_SPECTRUM_ANALYZER_URL=http://localhost:8092

# WebSocket Configuration (Legacy - to be replaced with unified backend WS)
PUBLIC_HACKRF_WS_URL=ws://localhost:8092
PUBLIC_KISMET_WS_URL=ws://localhost:2501

# Feature Flags
PUBLIC_ENABLE_DEBUG=false
PUBLIC_ENABLE_MOCK_DATA=false

# Performance optimizations
VITE_BUILD_SOURCEMAP=false
EOF
    print_status "Production environment file created. Please update with actual values."
fi

# Clean previous build
print_status "Cleaning previous build..."
rm -rf build dist .svelte-kit

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    print_status "Installing dependencies..."
    npm ci --production=false
fi

# Run the build
print_status "Building for production..."
if npm run build; then
    print_status "Build completed successfully!"
else
    print_error "Build failed!"
    exit 1
fi

# Check if build output exists
if [ ! -d "build" ]; then
    print_error "Build directory not found after build!"
    exit 1
fi

# Create production start script
print_status "Creating production start script..."
cat > scripts/start-production.sh << 'EOF'
#!/bin/bash

# ArgosFinal Production Start Script
# Serves the built application

set -e

# Color codes
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[PROD]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Check if build exists
if [ ! -d "build" ]; then
    print_error "Build directory not found! Run scripts/build-production.sh first."
    exit 1
fi

# Load production environment
if [ -f ".env.production" ]; then
    print_status "Loading production environment..."
    export $(grep -v '^#' .env.production | xargs)
else
    print_error "Production environment file not found!"
    exit 1
fi

# Set production environment
export NODE_ENV=production
export PORT=${PORT:-3000}

print_status "Starting ArgosFinal in production mode..."
print_status "Server will be available at http://localhost:${PORT}"

# Start the server
exec node build/index.js
EOF

chmod +x scripts/start-production.sh

# Create systemd service file (optional)
print_status "Creating systemd service file template..."
cat > scripts/argos-final.service << EOF
[Unit]
Description=ArgosFinal Production Server
After=network.target

[Service]
Type=simple
User=pi
WorkingDirectory=/home/pi/projects/ArgosFinal
ExecStart=/home/pi/projects/ArgosFinal/scripts/start-production.sh
Restart=on-failure
RestartSec=10

# Environment
Environment="NODE_ENV=production"
Environment="PORT=3000"

# Security
NoNewPrivileges=true
PrivateTmp=true

[Install]
WantedBy=multi-user.target
EOF

# Create PM2 ecosystem file (alternative to systemd)
print_status "Creating PM2 ecosystem file..."
cat > ecosystem.config.js << 'EOF'
module.exports = {
  apps: [{
    name: 'argos-final',
    script: './build/index.js',
    instances: 1,
    exec_mode: 'cluster',
    env: {
      NODE_ENV: 'production',
      PORT: 3000
    },
    env_production: {
      NODE_ENV: 'production',
      PORT: 3000
    },
    error_file: './logs/err.log',
    out_file: './logs/out.log',
    log_file: './logs/combined.log',
    time: true,
    max_memory_restart: '500M',
    restart_delay: 3000,
    autorestart: true,
    max_restarts: 10
  }]
};
EOF

# Create logs directory
mkdir -p logs

# Generate build info
print_status "Generating build info..."
cat > build/build-info.json << EOF
{
  "version": "$(node -p "require('./package.json').version")",
  "buildTime": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "commit": "$(git rev-parse HEAD 2>/dev/null || echo 'unknown')",
  "branch": "$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo 'unknown')",
  "nodeVersion": "$(node --version)",
  "npmVersion": "$(npm --version)"
}
EOF

# Summary
echo ""
print_status "Production build complete!"
echo ""
echo "Next steps:"
echo "1. Update .env.production with your production values"
echo "2. Start the server with: ./scripts/start-production.sh"
echo "3. Or use PM2: pm2 start ecosystem.config.js --env production"
echo "4. Or install as systemd service: sudo cp scripts/argos-final.service /etc/systemd/system/"
echo ""
echo "Build info:"
echo "- Output directory: ./build"
echo "- Start script: ./scripts/start-production.sh"
echo "- Service file: ./scripts/argos-final.service"
echo "- PM2 config: ./ecosystem.config.js"